#include <cos_component.h>
#include <print.h>
#include <lua.h>
#include <lualib.h>
#include <lauxlib.h>
#include <stdlib.h>

char* default_tablespace = "DEFAULT";

// Exported function calls in the interface
//char* luakv_getstring_bytable (lua_State *L, char *key, char *table_name);
//char* luakv_getstring (lua_State *L, char *key);
//int  luakv_getnumber_bytable (lua_State *L, char *key, char *table_name);
//int  luakv_getnumber (lua_State *L, char *key);
//void luakv_putstring_bytable (lua_State *L, char *key, char *value, char *table_name);
//void luakv_putstring (lua_State *L, char *key, char *value);
//void luakv_putnumber_bytable (lua_State *L, char *key, int intvalue, char *table_name);
//void luakv_putnumber (lua_State *L, char *key, int intvalue);

// Non exported function declaration
void create_tablespace(lua_State *L, char *table_name);

//  Table specific string value lookup from the lua_State
char* luakv_getstring_bytable (lua_State *L, char *key, char *table_name) 
{
	char *result;
	lua_getglobal(L, table_name);
	if(!lua_istable(L, -1))
	{
		create_tablespace(L, table_name);
	}
	lua_pushstring(L, key);
	lua_gettable(L, -2);
	result = (char*)lua_tostring(L, -1);
	lua_pop(L, 1);  
	return result;
}

//  Search for a string value from the default table
char* luakv_getstring (lua_State *L, char *key)
{
	return luakv_getstring_bytable (L, key, default_tablespace);
}

// Table specific lookup for an int value
int luakv_getnumber_bytable (lua_State *L, char *key, char *table_name)
{
	lua_getglobal(L, table_name);
	if(!lua_istable(L, -1))
	{
		create_tablespace(L, table_name);
	}
	lua_pushstring(L, key);
	lua_gettable(L, -2);
	int result = (int)lua_tonumber(L, -1);
	lua_pop(L, 1);  
	return result;

}

// Search for a number value in the default table
int luakv_getnumber (lua_State *L, char *key)
{
	return luakv_getnumber_bytable(L, key, default_tablespace);
}

// Store a string value in the specified table
void luakv_putstring_bytable (lua_State *L, char *key, char *value, char *table_name)
{
	lua_getglobal(L, table_name);
	if(!lua_istable(L, -1))
        {
                create_tablespace(L, table_name);
        }
	lua_pushstring(L, key);
	lua_pushstring(L, value);
	lua_settable(L, -3);
}

// Store a string value in the default table
void luakv_putstring (lua_State *L, char *key, char *value)
{
	luakv_putstring_bytable(L, key, value, default_tablespace);
}

// Store an int value in the specified table
void luakv_putnumber_bytable (lua_State *L, char *key, int intvalue, char *table_name)
{
	lua_getglobal(L, table_name);
	if(!lua_istable(L, -1))
        {
                create_tablespace(L, table_name);
        }
	lua_pushstring(L, key);
	lua_pushnumber(L, intvalue);
	lua_settable(L, -3);

}

// Store an int value in the default table
void luakv_putnumber (lua_State *L, char *key, int intvalue)
{
	luakv_putnumber_bytable(L, key, intvalue, default_tablespace);
}


/*
*   Creates a table on the lua_State object for general use.
*/
void create_tablespace (lua_State *L, char *table_name)
{
	// Create the new table and assign it to global name *table_name
	lua_newtable(L);
	lua_setglobal(L, table_name);
	// Put the newly created table on top of the stack
	lua_getglobal(L, table_name);
}

void cos_init(void)
{
	printc("Trying out some keyval operations\n");
	// Creates the lua state
	lua_State *L = luaL_newstate();
printc("set new state\n");
	char *nilField = luakv_getstring(L,"not_there");
	printc("trying to getString before fields are entered. received %s\n", nilField);
	luakv_putstring(L,"key1","value1");
	luakv_putnumber(L,"key2",(int)2);
	luakv_putstring(L,"key3","value3");
printc("set fields\n");
	luakv_putstring(L,"key4","value4");
printc("set field 4\n");
	luakv_putstring(L,"key3","resetvalue3");
printc("reset field 3\n");
	int retField = luakv_getnumber(L,"key2");
	printc("pull from the table key2: %d\n", retField);
	char *retField2 = luakv_getstring(L,"key2");
	printc("pull from the table key2: %s\n", retField2);
	char *retField3 = luakv_getstring(L,"key1");
	printc("pull from the table key1: %s\n", retField3);
	char *retField4 = luakv_getstring(L,"key4");
	printc("pull from the table key4: %s\n", retField4);
	char *retField5 = luakv_getstring(L,"key3");
	printc("pull from the table key3: %s\n", retField5);
	
	luakv_putstring(L,"key5","newval5");
	char *retField6 = luakv_getstring(L,"key5");
	printc("pull from the table key5: %s\n", retField6);
	char *retField7 = luakv_getstring(L,"key2");
	printc("pull from the table key2: %s\n", retField7);
	
	// Closes lua
	lua_close(L);
	printc("lua_state has been closed\n");
	return;
}




